<script>
  let synth = window.speechSynthesis;
  var voice = null;

  document.addEventListener('keydown', (e) => {
    if (e.keyCode != 27) return;

    synth.cancel();
  });

  let speechLoop = function(e) {
    if (synth.speaking) {
      synth.cancel();
    }
    var seconds = 3;
    var cancelRedirect = false;
    show_time();
    var timeout = setTimeout(function(){go_to_redirect()},(seconds * 1000));
    var interval = setInterval(function(){show_time()},1000);

    let digitsInput = document.getElementById('digits');
    if (!!digitsInput) digitsInput.focus();

    let userInteractionNotice = document.getElementById('userInteractionNotice');

    userInteractionNotice.classList.add('is-hidden');

    function go_to_redirect()
    {
      clearTimeout(timeout);
      clearInterval(interval);
      let redirectForm = document.getElementById("redirect_form");
      if (!redirectForm || cancelRedirect) return;
      redirectForm.submit();
    }

    function show_time()
    {
      var timeLeft = document.getElementById('time_left');
      if (!timeLeft) return;
      timeLeft.innerHTML = seconds;
      seconds--;
    }

    function speak(text) {
      <% unless @silent %>
      var utterance = new SpeechSynthesisUtterance(text);
      utterance.rate = 1.5;
      utterance.volume = 0.5;
      console.log('setting voice:');
      console.log(voice);
      utterance.voice = voice;
      synth.speak(utterance);
      setTimeout(() => {
        if (!synth.speaking) {
          userInteractionNotice.classList.remove('is-hidden');
          document.addEventListener('click', speechLoop, { once: true });
        }
      }, 100);
      <% end %>
    }

    <% if @say.any? %>


      let voiceSetInterval = setInterval(function() {
        console.log('trying to set voice...');
        voice = synth.getVoices().find((v) => v.name == 'Alex');
        if (typeof voice !== 'undefined') {
          clearInterval(voiceSetInterval);
          console.log('success!');
          console.log(voice);

          document.querySelectorAll('.speak').forEach(function(el) {
            if (el.classList.contains('pause')) {
              var times = Math.round(Math.ceil(parseFloat(el.textContent)));
              speak(', , , , , '.repeat(times));
            } else {
              speak(el.textContent);
            }
          });

        } else {
          console.log('fail!');
        }
      }, 100);

      if (!!digitsInput) digitsInput.addEventListener('keydown', function(e) {
        if (e.keyCode === 32) e.preventDefault();
      });


    <% end %>

    document.addEventListener('keydown', function(e) {
      <% if @redirect.any? %>
        if (e.keyCode == 27) {
          cancelRedirect = true;
          return;
        }
      <% end %>
      <% if @say.any? %>
        if (e.keyCode !== 32) return;
        if (synth.speaking) {
            if (synth.paused) {
                synth.resume();
            } else {
                synth.pause();
            }
        }
      <% end %>

    });


    // Get all "navbar-burger" elements
    const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);

    // Check if there are any navbar burgers
    if ($navbarBurgers.length > 0) {

      // Add a click event on each of them
      $navbarBurgers.forEach( el => {
        el.addEventListener('click', () => {

          // Get the target from the "data-target" attribute
          const target = el.dataset.target;
          const $target = document.getElementById(target);

          // Toggle the "is-active" class on both the "navbar-burger" and the "navbar-menu"
          el.classList.toggle('is-active');
          $target.classList.toggle('is-active');

        });
      });
    }


  }

  document.addEventListener('DOMContentLoaded', speechLoop);
</script>
